When would you want to use a remote repository rather than keeping all your work
local?

    - I would want to use a remote repository if I want to collaborate with others
    or if I want to save my work in a remote location so that I could access
    it from elsewhere.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    - Because it can get confusing the code is updated before I have completed my
    modifications. Also, my code might not work properly if the code is updated
    with the "master changes".
    - Also, it's possible that the changes would not be merged anyway, because
    there will likely be merge conflicts that need to be resolved manually.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Clone - this is a copy of a repository, including all the files and the entire
    history

    Fork - this is a github feature. This is a clone of another user's repository,
    but with the added feature of tracking the clones and linking to the user who
    initially created the repository

    Branch - branches have the same parent commits, but moving forward the changes
    between the branches will be different. Branches can be merged so that the changes
    can be combined. Branches are used for experimental changes, for new versions, and
    for collaboration.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    This enables us to incorporate the updates to the remote and the chance to resolve
    any conflicts before trying to push the changes to the remote. 

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would collaborate by saving the file in a shared directory, sending emails 
    to notify about updates, using change tracking feature (like in Microsoft Word), 
    if that feature is available.  It would be easier because there are no commands 
    to learn. But it would be more difficult to find the changes and identify 
    and resolve conflicts.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    An instance where you would want to create changes in a separate branch is 
    when you want to work on an experimental change or a new version of your
    project or if you are collaborating with others. Making changes in a separate
    branch allows you to always have a working, production quality version
    of your project while you work on your experimental changes or other version.
    
    When collaborating, it's better to have a separate branch rather than working
    on the master branch because the different labels helps identify the changes
    that other people are working on (you have an idea right away about their changes
    even before you see their code). Also, when there are different branches,
    reviewing the changes would not be very messy (I can imagine having changes from 
    more than 3 people on the master branch can be rather difficult to work with.)
