What happens when you initialize a repository? Why do you need to do it?

	- Makes a directory a repository
	- Adds a .git directory
	- I need to do it to enable version control for that directory

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	- Staging area is different from working directory in that the staging area
	can be a subset of the working directory. Staging area is where you can
	select the files that you want to commit
	- Staging area is different from repository in that the changes in the
	staging area have not yet been committed and therefore have no commit ids


How can you use the staging area to make sure you have one commit per logical
change?

	- By adding to the staging area only the files that are logically related
	to the commit that I am making.. as opposed to adding all the files, even the
	ones that are not logically related to the commit

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	- Branches would be helpful if I want to work on an experimental feature or
	if I want to have a new version, for example, another language version, of
	my project. Branches would help by allowing me to fix any bugs in the master branch
	and then incorporate that bug fix to my experimental feature branch and my new
	version branch by merging.

How do the diagrams help you visualize the branch structure?

	- Diagrams help me visualize the branch structure it allows me to easily see
	the existing branches and which commits are reachable by other commits according
	to their respective branches

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	- Merging two branches together combines the commits from the two branches.
	They are represented in the diagram as such in order to show that git 
	still knows the parent of the commit even though in git log the commits are
	shown in chronological order as opposed to the order where the parent and child
	commits are beside each other. The diagram also shows the linear path after
	the merge point.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	- Pros of automatic merging
		- straight-forward merges are automatically merged. No need for intervention
		by the programmer
		- Easy
	- Cons of automatic merging
		- it's possible that a seemingly valid update does not work in harmonly with 
		another seemingly valid update. These get automerged and might cause the code
		to not work
	- Pros of manual merges
		- codes are always checked to make sure they make sense before merging
	- Cons of manual merges
		- can be tedious if there are many lines to be reviewed.. especially if those
		lines are straight forward merges and do not really need reviewing
